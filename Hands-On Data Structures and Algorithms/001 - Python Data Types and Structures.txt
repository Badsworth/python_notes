Python Data Types and Structures

Data structures and algorithms are important components in the development of any software system. An algorithm can
be defined as a set of step-by-step instructions to solve any given problem; an algorithm processes the data and
produces the output results based on the specific problem. The data used by the algorithm to solve the problem has
to be stored and organized efficiently in the computer memory for the efficient implementation of the software. The
performance of the system depends upon the efficient access and retrieval of the data, and that depends upon how
well the data structures that store and organize the data in the system are chosen.

Data structures deal with how the data is stored and organized in the memory of the computer that is going to be used
in a program. Computer scientists should understand how efficient an algorithm is and which data structure should be
used in its implementation. The Python programming language is a robust, powerful, and widely used language to develop
software-based systems. Python is a high-level, interpreted, and object-oriented language that is very convenient to
learn and understand the concepts of data structures and algorithms.

The principal built-in types are as follows and will be discussed in more detail in the following sections:

- Numeric types: Integer (int), float, complex
- Boolean types: bool
- Sequence types: String (str), range, list, tuple
- Mapping types: dictionary (dict)
- Set types: set, frozenset

We will divide these into basic (numeric, Boolean, and sequence) and complex (mapping and set) data types.

Basic data types
----------------
The most basic data types are numeric and Boolean types. We’ll cover those first, followed by sequence data types.

Sequences
Sequence data types are used to store multiple values in a single variable in an organized and efficient way. There
are four basic sequence types: string, range, lists, and tuples.

a. Strings
   A string is an immutable sequence of characters represented in single, double, or triple quotes.

b. Range
   The range data type represents an immutable sequence of numbers. It is mainly used in for and while loops. It
   returns a sequence of numbers starting from a given number up to a number specified by the function argument.
   It is used as in the following command:
      range(start, stop, step)

      print(list(range(10)))
      print(range(10))
      print(list(range(10)))
      print(range(1,10,2))
      print(list(range(1,10,2)))
      print(list(range(20,10,-2)))

c. Lists
   Python lists are used to store multiple items in a single variable. Duplicate values are allowed in a list,
   and elements can be of different types: for example, you can have both numeric and string data in a Python list.

   The items stored in the list are enclosed within square brackets, [], and separated with a comma, as shown below:
      a = ['food', 'bus', 'apple', 'queen']
      print(a)
      mylist  = [10, "India", "world", 8]
      # accessing elements in list.
      print(mylist[1])

   The characteristics of a list in Python are as follows. Firstly, the list elements can be accessed by its index,
   as shown in Figure 1.4. The list elements are ordered and dynamic. It can contain any arbitrary objects that are
   so desired. In addition, the list data structure is mutable, whereas most of the other data types, such as integer
   and float are immutable.   

d. Tuples
   Tuples are used to store multiple items in a single variable. It is a read-only collection where data is ordered
   (zero-based indexing) and unchangeable/immutable (items cannot be added, modified, removed). Duplicate values are
   allowed in a tuple, and elements can be of different types, similar to lists. Tuples are used instead of lists
   when we wish to store the data that should not be changed in the program.

   Tuples are written with round brackets and items are separated by a comma:
      my_tuple = ("Shyam", 23, True, "male")


Complex data types
------------------
We have discussed basic data types. Next, we discuss complex data types, which are mapping data types, in other words,
dictionary, and set data types, namely, set and frozenset. We will discuss these data types in detail in this section.

a. Dictionaries
   In Python, a dictionary is another of the important data types, similar to a list, in the sense that it is also a
   collection of objects. It stores the data in unordered {key-value} pairs; a key must be of a hashable and immutable
   data type, and value can be any arbitrary Python object. In this context, an object is hashable if it has a hash
   value that does not change during its lifetime in the program.

   Items in the dictionary are enclosed in curly braces, {}, separated by a comma, and can be created using the
   {key:value} syntax, as shown below:
      my_dict = {'1': 'data', 
           '2': 'structure', 
           '3': 'python', 
           '4': 'programming', 
           '5': 'language' 
          }

    The dictionary data type is mutable and dynamic. It differs from lists in the sense that dictionary elements can
    be accessed using keys, whereas the list elements are accessed via indexing.

b. Sets
   A set is an unordered collection of hashable objects. It is iterable, mutable, and has unique elements. The order
   of the elements is also not defined. While the addition and removal of items are allowed, the items themselves within
   the set must be immutable and hashable. Sets support membership testing operators (in, not in), and operations such as
   intersection, union, difference, and symmetric difference. Sets cannot contain duplicate items. They are created by
   using the built-in set() function or curly braces {}. A set() returns a set object from an iterable.

   For example:
      x1 = set(['and', 'python', 'data', 'structure'])
      print(x1)
      print(type(x1))
      x2 = {'and', 'python', 'data', 'structure'}
      print(x2)

   Immutable sets
   In Python, frozenset is another built-in type data structure, which is, in all respects, exactly like a set, except
   that it is immutable, and so cannot be changed after creation. The order of the elements is also undefined.

   A frozenset is created by using the built-in function frozenset():
      x = frozenset(['data', 'structure', 'and', 'python'])
      print(x)

Python’s collections module
The collections module provides different types of containers, which are objects that are used to store different
objects and provide a way to access them. Before accessing these, let’s consider briefly the role and relationships
between modules, packages, and scripts.

A module is a Python script with the .py extension that contains a collection of functions, classes, and variables.
A package is a directory that contains collections of modules; it has an __init__.py file, which lets the interpreter
know that it is a package. A module can be called into a Python script, which can in turn make use of the module’s
functions and variables in its code. In Python, we can import these to a script using the import statement. Whenever
the interpreter encounters the import statement, it imports the code of the specified module.

The table below provides the data types and operations of the collections module and their descriptions:

   namedtuple   Creates a tuple with named fields similar to regular tuples.

   deque        Doubly-linked lists that provide efficient adding and removing of items from both ends of the list.

   defaultdict  A dictionary subclass that returns default values for missing keys.

   ChainMap     A dictionary that merges multiple dictionaries.

   Counter      A dictionary that returns the counts corresponding to their objects/key.

   UserDict     These data types are used to add more functionalities to their base data structure, such as a dictionary,
   UserList     list, and string. And we can create subclasses from them for custom dict/list/string.
   UserString

a. Named tuples
   The namedtuple of collections provides an extension of the built-in tuple data type. namedtuple objects are immutable,
   similar to standard tuples. Thus, we can’t add new fields or modify existing ones after the namedtuple instance is
   created. They contain keys that are mapped to a particular value, and we can iterate through named tuples either by
   index or key. The namedtuple function is mainly useful when several tuples are used in an application and it is important
   to keep track of each of the tuples in terms of what they represent.

   In this situation, namedtuple presents a more readable and self-documenting method. The syntax is as follows:
      nt = namedtuple(typename , field_names)

   Here is an example:
      from collections import namedtuple
      Book = namedtuple ('Book', ['name', 'ISBN', 'quantity'])
      Book1 = Book('Hands on Data Structures', '9781788995573', '50')
      #Accessing data items
      print('Using index ISBN:' + Book1[1])
      print('Using key ISBN:' + Book1.ISBN)

   Here, in the above code, we firstly imported namedtuple from the collections module. Book is a named tuples, “class,” and
   then, Book1 is created, which is an instance of Book. We also see that the data elements can be accessed using index and
   key methods.

b. Deque
   A deque is a double-ended queue (deque) that supports append and pop elements from both sides of the list. Deques are
   implemented as double-linked lists, which are very efficient for inserting and deleting elements in O(1) time complexity.

   Consider an example:
      from collections import deque
      s = deque()   # Creates an empty deque
      print(s)
      my_queue = deque([1, 2, 'Name'])
      print(my_queue)

   You can also use some of the following predefined functions:

   function                     description

   my_queue.append('age')       Insert 'age' at the right end of the list.

   my_queue.appendleft('age')   Insert 'age' at the left end of the list.

   my_queue.pop()               Delete the rightmost value.

   my_queue.popleft()           Delete the leftmost value.

c. Ordered dictionaries
   An ordered dictionary is a dictionary that preserves the order of the keys that are inserted. If the key order is important
   for any application, then OrderedDict can be used:
      od = OrderedDict([items])

   An example could look like the following:
      from collections import OrderedDict
      od = OrderedDict({'my': 2, 'name ': 4, 'is': 2, 'Mohan' :5})
      od['hello'] = 4
      print(od)

d. Default dictionary
   The default dictionary (defaultdict) is a subclass of the built-in dictionary class (dict) that has the same methods and
   operations as that of the dictionary class, with the only difference being that it never raises a KeyError, as a normal
   dictionary would. defaultdict is a convenient way to initialize dictionaries:
      d = defaultdict(def_value)

   An example could look like the following:
      from collections import defaultdict
      dd = defaultdict(int)
      words = str.split('data python data data structure data python')
      for word in words:
          dd[word] += 1
      print(dd)

      In the above example, if an ordinary dictionary had been used, then Python would have shown KeyError while the first key
      was added. int, which we supplied as an argument to defaultdict, is really the int() function, which simply returns a zero.

e. ChainMap object
   ChainMap is used to create a list of dictionaries. The collections.ChainMap data structure combines several dictionaries
   into a single mapping. Whenever a key is searched in the chainmap, it looks through all the dictionaries one by one,
   until the key is not found:
      class collections.ChainMap(dict1, dict2)

   An example could look like the following:
      from collections import ChainMap
      dict1 = {"data": 1, "structure": 2}
      dict2 = {"python": 3, "language": 4}
      chain = ChainMap(dict1, dict2)
      print(chain)
      print(list(chain.keys()))
      print(list(chain.values()))
      print(chain["data"])
      print(chain["language"])

      In the above code, we create two dictionaries, namely, dict1 and dict2, and then we can combine both of these
      dictionaries using the ChainMap method.

f. Counter objects
   As we discussed earlier, a hashable object is one whose hash value will remain the same during its lifetime in the program.
   counter is used to count the number of hashable objects. Here, the dictionary key is a hashable object, while the corresponding
   value is the count of that object. In other words, counter objects create a hash table in which the elements and their count
   are stored as dictionary keys and value pairs.

   Dictionary and counter objects are similar in the sense that data is stored in a {key, value} pair, but in counter objects,
   the value is the count of the key whereas it can be anything in the case of dictionary. Thus, when we only want to see how
   many times each unique word is occurring in a string, we use the counter object.

   An example could look like the following:
      from collections import Counter
      inventory = Counter('hello')
      print(inventory)
      print(inventory['l'])
      print(inventory['e'])
      print(inventory['o'])

      In the above code, the inventory variable is created, which holds the counts of all the characters using the counter module.
      The count values of these characters can be accessed using dictionary-like key access ([key]).

g. UserDict
   Python supports a container, UserDict, present in the collections module, that wraps the dictionary objects. We can add customized
   functions to the dictionary. This is very useful for applications where we want to add/update/modify the functionalities of the
   dictionary. Consider the example code below where pushing/adding a new data element is not allowed in the dictionary:

      # we can not push to this user dictionary
      from collections import UserDict
      class MyDict(UserDict):
          def push(self, key, value):
              raise RuntimeError("Cannot insert")
      d = MyDict({'ab':1, 'bc': 2, 'cd': 3})
      d.push('b', 2)

      The output is as follows:
      RuntimeError: Cannot insert

   In the above code, a customized push function in the MyDict class is created to add the customized functionality, which does not
   allow you to insert an element into the dictionary.

h. UserList
   A UserList is a container that wraps list objects. It can be used to extend the functionality of the list data structure. Consider
   the example code below, where pushing/adding a new data element is not allowed in the list data structure:

      # we can not push to this user list
      from collections import UserList
      class MyList(UserList):
          def push(self, key):
              raise RuntimeError("Cannot insert in the list")
      d = MyList([11, 12, 13])
      d.push(2)

      The output is as follows:
      RuntimeError: Cannot insert in the list

      In the above code, a customized push function in the MyList class is created to add the functionality to not allow you to insert
      an element into the list variable.

i. UserString
   Strings can be considered as an array of characters. In Python, a character is a string of one length and acts as a container that
   wraps a string object. It can be used to create strings with customized functionalities. An example could look like the following:

      #Create a custom append function for string
      from collections import UserString
      class MyString(UserString):
          def append(self, value):
              self.data += value
      s1 = MyString("data")
      print("Original:", s1)
      s1.append('h')
      print("After append: ", s1)

      In the above example code, a customized append function in the MyString class is created to add the functionality to append a string.

SUMMARY
In this chapter, we have discussed different built-in data types supported by Python. We have also looked at a few basic Python functions,
libraries, and modules, such as the collections module. The main objective of this chapter was to give an overview of Python and make a user
acquainted with the language so that it is easy to implement the advanced algorithms of data structures.

Overall, this chapter has provided an overview of several data structures available in Python that are pivotal for understanding the internals
of data structures. In the next chapter, we will introduce the basic concepts of algorithm design and analysis.